# docker-compose.yml
services:

  # ──────────────────────────────────────────────────────────────────────────────
  # PostgreSQL
  # ──────────────────────────────────────────────────────────────────────────────
  postgres:
    container_name: ai-karen-postgres
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER:    ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB:      ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/migrations/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Elasticsearch
  # ──────────────────────────────────────────────────────────────────────────────
  elasticsearch:
    container_name: ai-karen-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Redis
  # ──────────────────────────────────────────────────────────────────────────────
  redis:
    container_name: ai-karen-redis
    image: redis:7-alpine
    restart: unless-stopped
    env_file:
      - .env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Milvus Dependencies: Etcd
  # ──────────────────────────────────────────────────────────────────────────────
  milvus-etcd:
    container_name: ai-karen-milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    restart: unless-stopped
    command: >
      etcd
      -advertise-client-urls=http://0.0.0.0:2379
      -listen-client-urls=http://0.0.0.0:2379
      --data-dir /etcd
    volumes:
      - etcd_data:/etcd
    healthcheck:
      test: ["CMD-SHELL", "etcdctl endpoint health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Milvus Dependencies: MinIO
  # ──────────────────────────────────────────────────────────────────────────────
  milvus-minio:
    container_name: ai-karen-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    restart: unless-stopped
    env_file:
      - .env
    command: minio server /data --console-address ":9001"
    ports:
      - "9000:9000"   # MinIO API
      - "9001:9001"   # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSL http://localhost:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Milvus Vector DB (Standalone)
  # ──────────────────────────────────────────────────────────────────────────────
  milvus:
    container_name: ai-karen-milvus
    image: milvusdb/milvus:v2.3.2
    restart: unless-stopped
    depends_on:
      milvus-etcd:
        condition: service_healthy
      milvus-minio:
        condition: service_healthy
    env_file:
      - .env
    environment:
      ETCD_ENDPOINTS:           milvus-etcd:2379
      MINIO_ADDRESS:            milvus-minio:9000
      MINIO_ACCESS_KEY_ID:      ${MINIO_ACCESS_KEY}
      MINIO_SECRET_ACCESS_KEY:  ${MINIO_SECRET_KEY}
      DEPLOY_MODE:              standalone
    ports:
      - "19530:19530"   # gRPC API
      - "9091:9091"     # HTTP (health)
      - "19121:19121"   # Prometheus exporter
      - "30001:30001"   # RootCoord
      - "30002:30002"   # DataCoord
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSL http://localhost:9091/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Local LLM Models Volume (for llama-cpp-python GGUF models)
  # ──────────────────────────────────────────────────────────────────────────────
  # Note: llama-cpp-python runs in-process with the main application
  # Models should be placed in ./models/llama-cpp/ directory

  # ──────────────────────────────────────────────────────────────────────────────
  # Prometheus Monitoring
  # ──────────────────────────────────────────────────────────────────────────────
  prometheus:
    container_name: ai-karen-prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
    ports:
      - "9090:9090"
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Grafana Dashboard
  # ──────────────────────────────────────────────────────────────────────────────
  grafana:
    container_name: ai-karen-grafana
    image: grafana/grafana:9.5.2
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_PROVISIONING_PATH=/etc/grafana/provisioning
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana_dashboard.json:/etc/grafana/provisioning/dashboards/health_dashboard.json
      - ./monitoring/model_orchestrator_dashboard.json:/etc/grafana/provisioning/dashboards/model_orchestrator_dashboard.json
      - ./monitoring/grafana_provisioning.yml:/etc/grafana/provisioning/dashboards/provisioning.yml
    depends_on:
      - prometheus
      - elasticsearch
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # FastAPI Backend (“api”)
  # ──────────────────────────────────────────────────────────────────────────────
  api:
    container_name: ai-karen-api
    build: .
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Model Orchestrator Plugin Configuration
      PLUGIN_DIR: "/app/plugin_marketplace"
      MODELS_ROOT: "/app/models"
      CONFIG_PATH: "/app/config"
      MODEL_ORCHESTRATOR_ENABLED: "true"
      MODEL_ORCHESTRATOR_MAX_STORAGE_GB: "100"
      MODEL_ORCHESTRATOR_ENABLE_METRICS: "true"
      MODEL_ORCHESTRATOR_ENABLE_RBAC: "true"
      MODEL_ORCHESTRATOR_HEALTH_CHECK_INTERVAL: "60"
    ports:
      - "8000:8000"
      - "9091:9091"  # Model orchestrator metrics port
    volumes:
      # Model storage volume
      - models_data:/app/models
      # Configuration volume
      - ./config:/app/config:ro
      # Logs volume
      - logs_data:/app/logs
      # Backup volume
      - backup_data:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus:
        condition: service_healthy
      prometheus:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health | grep -q '\"model_orchestrator\"' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai-karen-net

# ──────────────────────────────────────────────────────────────────────────────
# Named Volumes
# ──────────────────────────────────────────────────────────────────────────────
volumes:
  postgres_data:
  es_data:
  redis_data:
  etcd_data:
  minio_data:
  milvus_data:
  grafana_data:
  models_data:
  logs_data:
  backup_data:

# ──────────────────────────────────────────────────────────────────────────────
# Custom Network
# ──────────────────────────────────────────────────────────────────────────────
networks:
  ai-karen-net:
    driver: bridge
