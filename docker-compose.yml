# docker-compose.yml

services:

  # ──────────────────────────────────────────────────────────────────────────────
  # PostgreSQL
  # ──────────────────────────────────────────────────────────────────────────────
  postgres:
    image: postgres:15-alpine
    container_name: ai-karen-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-karen_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-karen_secure_pass_change_me}
      POSTGRES_DB:      ${POSTGRES_DB:-ai_karen}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/migrations/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Elasticsearch
  # ──────────────────────────────────────────────────────────────────────────────
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: ai-karen-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Redis
  # ──────────────────────────────────────────────────────────────────────────────
  redis:
    image: redis:7-alpine
    container_name: ai-karen-redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Milvus Dependencies: etcd + MinIO
  # ──────────────────────────────────────────────────────────────────────────────
  milvus-etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: ai-karen-milvus-etcd
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    command: >
      etcd
      -advertise-client-urls=http://0.0.0.0:2379
      -listen-client-urls=http://0.0.0.0:2379
      --data-dir /etcd
    volumes:
      - etcd_data:/etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai-karen-net

  milvus-minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: ai-karen-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER:     ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    ports:
      - "9000:9000"
      - "9001:9001"
    command: minio server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl -f http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Milvus Vector DB (Standalone Mode)
  # ──────────────────────────────────────────────────────────────────────────────
  milvus:
    image: milvusdb/milvus:v2.3.2
    container_name: ai-karen-milvus
    restart: unless-stopped
    depends_on:
      milvus-etcd:
        condition: service_healthy
      milvus-minio:
        condition: service_healthy
    environment:
      ETCD_ENDPOINTS:          milvus-etcd:2379
      MINIO_ADDRESS:          milvus-minio:9000
      MINIO_ACCESS_KEY_ID:    ${MINIO_ACCESS_KEY}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      DEPLOY_MODE:            standalone
    ports:
      - "19530:19530"   # gRPC
      - "9091:9091"     # HTTP (health, metrics)
      - "19121:19121"   # Prometheus exporter
      - "30001:30001"   # RootCoord
      - "30002:30002"   # DataCoord
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSL http://localhost:9091/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # Ollama LLM Service
  # ──────────────────────────────────────────────────────────────────────────────
  ollama:
    image: ollama/ollama:latest
    container_name: ai-karen-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl -f http://localhost:11434"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - ai-karen-net

  # ──────────────────────────────────────────────────────────────────────────────
  # FastAPI Backend (“api”)
  # ──────────────────────────────────────────────────────────────────────────────
  api:
    build: .
    container_name: ai-karen-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - KARI_CORS_ORIGINS=http://localhost:8010
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - ai-karen-net

# ──────────────────────────────────────────────────────────────────────────────
# Named Volumes
# ──────────────────────────────────────────────────────────────────────────────
volumes:
  postgres_data:
  es_data:
  redis_data:
  etcd_data:
  minio_data:
  milvus_data:
  ollama_data:

# ──────────────────────────────────────────────────────────────────────────────
# Custom Network
# ──────────────────────────────────────────────────────────────────────────────
networks:
  ai-karen-net:
    driver: bridge
