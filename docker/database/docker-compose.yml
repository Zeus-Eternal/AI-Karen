services:
  postgres:
    image: postgres:15-alpine
    container_name: ai-karen-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_karen}
      POSTGRES_USER: ${POSTGRES_USER:-karen_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-karen_secure_pass_change_me}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
      - ./migrations/postgres:/migrations/postgres:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-karen_user} -d ${POSTGRES_DB:-ai_karen}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-karen-db

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: ai-karen-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms${ELASTICSEARCH_HEAP_SIZE:-1g} -Xmx${ELASTICSEARCH_HEAP_SIZE:-1g}"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./init/elasticsearch:/usr/share/elasticsearch/config/init:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-karen-db

  milvus-etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: ai-karen-milvus-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    volumes:
      - etcd_data:/etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-karen-db

  milvus-minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: ai-karen-milvus-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    command: minio server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-karen-db

  milvus:
    image: milvusdb/milvus:v2.3.2
    container_name: ai-karen-milvus
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
      MINIO_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "${MILVUS_PORT:-19530}:19530"
    volumes:
      - milvus_data:/var/lib/milvus
      - ./init/milvus:/init:ro
    depends_on:
      - milvus-etcd
      - milvus-minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-karen-db

  redis:
    image: redis:7-alpine
    container_name: ai-karen-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_pass_change_me} --maxmemory ${REDIS_MEMORY_LIMIT:-512m} --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-karen-db

  # DuckDB runs as a file-based database, so we use a simple Alpine container to manage the files
  duckdb-manager:
    image: alpine:latest
    container_name: ai-karen-duckdb-manager
    volumes:
      - duckdb_data:/data/duckdb
      - ./init/duckdb:/init:ro
    command: /bin/sh -c "while true; do sleep 3600; done"
    restart: unless-stopped
    networks:
      - ai-karen-db

  # Initialization container that sets up all databases
  db-init:
    image: alpine:latest
    container_name: ai-karen-db-init
    volumes:
      - ./init:/init:ro
      - ./migrations:/migrations:ro
      - duckdb_data:/data/duckdb
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-ai_karen}
      - POSTGRES_USER=${POSTGRES_USER:-karen_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-karen_secure_pass}
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_pass_change_me}
      - DUCKDB_PATH=/data/duckdb/kari_duckdb.db
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      milvus:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: /init/init-all.sh
    networks:
      - ai-karen-db

volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  milvus_data:
    driver: local
  etcd_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  duckdb_data:
    driver: local

networks:
  ai-karen-db:
    driver: bridge
    name: ai-karen-database-network
