'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Download,
  Share2,
  Copy,
  Mail,
  Link,
  FileText,
  Image,
  Code,
  Calendar,
  Lock,
  Globe,
  Users,
  Eye,
  MessageSquare,
  Clock,
  Shield
} from 'lucide-react';
import { format, addDays } from 'date-fns';
import { useToast } from '@/hooks/use-toast';
import {
  ConversationExport,
  ConversationShare,
  ConversationThread,
  SharePermission
} from '@/types/enhanced-chat';

interface ConversationExportShareProps {
  thread: ConversationThread;
  onExport: (config: ConversationExport) => Promise<void>;
  onShare: (config: ConversationShare) => Promise<string>;
  className?: string;
}

export const ConversationExportShare: React.FC<ConversationExportShareProps> = ({
  thread,
  onExport,
  onShare,
  className = ''
}) => {
  const { toast } = useToast();
  
  // Export state
  const [exportConfig, setExportConfig] = useState<ConversationExport>({
    format: 'json',
    includeMetadata: true,
    includeReasoning: false,
    includeAttachments: true
  });
  const [isExporting, setIsExporting] = useState(false);

  // Share state
  const [shareConfig, setShareConfig] = useState<Omit<ConversationShare, 'shareId'>>({
    type: 'private',
    permissions: [],
    allowComments: false,
    allowDownload: false
  });
  const [shareUrl, setShareUrl] = useState<string>('');
  const [isSharing, setIsSharing] = useState(false);
  const [shareDialogOpen, setShareDialogOpen] = useState(false);
  const [exportDialogOpen, setExportDialogOpen] = useState(false);

  const handleExport = async () => {
    setIsExporting(true);
    try {
      await onExport(exportConfig);
      toast({
        title: 'Export Successful',
        description: `Conversation exported as ${exportConfig.format.toUpperCase()}`
      });
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Export Failed',
        description: 'Failed to export conversation. Please try again.'
      });
    } finally {
      setIsExporting(false);
      setExportDialogOpen(false);
    }
  };

  const handleShare = async () => {
    setIsSharing(true);
    try {
      const url = await onShare({
        ...shareConfig,
        shareId: '', // Will be generated by the service
      });
      setShareUrl(url);
      toast({
        title: 'Share Link Created',
        description: 'Conversation share link has been generated'
      });
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Share Failed',
        description: 'Failed to create share link. Please try again.'
      });
    } finally {
      setIsSharing(false);
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: 'Copied',
        description: 'Link copied to clipboard'
      });
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Copy Failed',
        description: 'Failed to copy to clipboard'
      });
    }
  };

  const getFormatIcon = (format: ConversationExport['format']) => {
    switch (format) {
      case 'json':
        return Code;
      case 'markdown':
        return FileText;
      case 'pdf':
        return FileText;
      case 'html':
        return Globe;
      default:
        return FileText;
    }
  };

  const getShareTypeIcon = (type: ConversationShare['type']) => {
    switch (type) {
      case 'public':
        return Globe;
      case 'team':
        return Users;
      case 'private':
      default:
        return Lock;
    }
  };

  return (
    <div className={`flex gap-2 ${className}`}>
      {/* Export Dialog */}
      <Dialog open={exportDialogOpen} onOpenChange={setExportDialogOpen}>
        <DialogTrigger asChild>
          <Button variant="outline" size="sm">
            <Download className="h-4 w-4 mr-2" />
            Export
          </Button>
        </DialogTrigger>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Download className="h-5 w-5" />
              Export Conversation
            </DialogTitle>
            <DialogDescription>
              Export "{thread.title}" in your preferred format
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {/* Format Selection */}
            <div className="space-y-2">
              <Label>Export Format</Label>
              <Select
                value={exportConfig.format}
                onValueChange={(value) => 
                  setExportConfig(prev => ({ ...prev, format: value as any }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="json">
                    <div className="flex items-center gap-2">
                      <Code className="h-4 w-4" />
                      JSON (Machine readable)
                    </div>
                  </SelectItem>
                  <SelectItem value="markdown">
                    <div className="flex items-center gap-2">
                      <FileText className="h-4 w-4" />
                      Markdown (Human readable)
                    </div>
                  </SelectItem>
                  <SelectItem value="pdf">
                    <div className="flex items-center gap-2">
                      <FileText className="h-4 w-4" />
                      PDF (Print ready)
                    </div>
                  </SelectItem>
                  <SelectItem value="html">
                    <div className="flex items-center gap-2">
                      <Globe className="h-4 w-4" />
                      HTML (Web ready)
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Export Options */}
            <div className="space-y-3">
              <Label>Include in Export</Label>
              
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="metadata"
                    checked={exportConfig.includeMetadata}
                    onCheckedChange={(checked) =>
                      setExportConfig(prev => ({ ...prev, includeMetadata: !!checked }))
                    }
                  />
                  <Label htmlFor="metadata" className="text-sm">
                    Message metadata (timestamps, confidence, etc.)
                  </Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="reasoning"
                    checked={exportConfig.includeReasoning}
                    onCheckedChange={(checked) =>
                      setExportConfig(prev => ({ ...prev, includeReasoning: !!checked }))
                    }
                  />
                  <Label htmlFor="reasoning" className="text-sm">
                    AI reasoning chains and explanations
                  </Label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="attachments"
                    checked={exportConfig.includeAttachments}
                    onCheckedChange={(checked) =>
                      setExportConfig(prev => ({ ...prev, includeAttachments: !!checked }))
                    }
                  />
                  <Label htmlFor="attachments" className="text-sm">
                    File attachments and media
                  </Label>
                </div>
              </div>
            </div>

            {/* Conversation Stats */}
            <Card>
              <CardContent className="p-3">
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="flex items-center gap-2">
                    <MessageSquare className="h-4 w-4 text-muted-foreground" />
                    <span>{thread.metadata.messageCount} messages</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4 text-muted-foreground" />
                    <span>{format(thread.createdAt, 'MMM dd, yyyy')}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-muted-foreground" />
                    <span>{thread.participants.length} participants</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge variant="secondary" className="text-xs">
                      {thread.metadata.complexity}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>

            <div className="flex gap-2 pt-2">
              <Button 
                onClick={handleExport} 
                disabled={isExporting}
                className="flex-1"
              >
                {isExporting ? 'Exporting...' : 'Export'}
              </Button>
              <Button 
                variant="outline" 
                onClick={() => setExportDialogOpen(false)}
              >
                Cancel
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Share Dialog */}
      <Dialog open={shareDialogOpen} onOpenChange={setShareDialogOpen}>
        <DialogTrigger asChild>
          <Button variant="outline" size="sm">
            <Share2 className="h-4 w-4 mr-2" />
            Share
          </Button>
        </DialogTrigger>
        <DialogContent className="max-w-lg">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Share2 className="h-5 w-5" />
              Share Conversation
            </DialogTitle>
            <DialogDescription>
              Create a shareable link for "{thread.title}"
            </DialogDescription>
          </DialogHeader>

          <Tabs defaultValue="settings" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="settings">Settings</TabsTrigger>
              <TabsTrigger value="link" disabled={!shareUrl}>Link</TabsTrigger>
            </TabsList>

            <TabsContent value="settings" className="space-y-4">
              {/* Share Type */}
              <div className="space-y-2">
                <Label>Share Type</Label>
                <Select
                  value={shareConfig.type}
                  onValueChange={(value) => 
                    setShareConfig(prev => ({ ...prev, type: value as any }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="private">
                      <div className="flex items-center gap-2">
                        <Lock className="h-4 w-4" />
                        Private (Password protected)
                      </div>
                    </SelectItem>
                    <SelectItem value="team">
                      <div className="flex items-center gap-2">
                        <Users className="h-4 w-4" />
                        Team (Organization members)
                      </div>
                    </SelectItem>
                    <SelectItem value="public">
                      <div className="flex items-center gap-2">
                        <Globe className="h-4 w-4" />
                        Public (Anyone with link)
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Password for private shares */}
              {shareConfig.type === 'private' && (
                <div className="space-y-2">
                  <Label>Password (Optional)</Label>
                  <Input
                    type="password"
                    placeholder="Leave empty for no password"
                    value={shareConfig.password || ''}
                    onChange={(e) => 
                      setShareConfig(prev => ({ ...prev, password: e.target.value }))
                    }
                  />
                </div>
              )}

              {/* Expiration */}
              <div className="space-y-2">
                <Label>Link Expires</Label>
                <Select
                  value={shareConfig.expiresAt ? 'custom' : 'never'}
                  onValueChange={(value) => {
                    if (value === 'never') {
                      setShareConfig(prev => ({ ...prev, expiresAt: undefined }));
                    } else {
                      const days = parseInt(value);
                      if (!isNaN(days)) {
                        setShareConfig(prev => ({ 
                          ...prev, 
                          expiresAt: addDays(new Date(), days) 
                        }));
                      }
                    }
                  }}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="never">Never</SelectItem>
                    <SelectItem value="1">1 day</SelectItem>
                    <SelectItem value="7">1 week</SelectItem>
                    <SelectItem value="30">1 month</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Permissions */}
              <div className="space-y-3">
                <Label>Permissions</Label>
                
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="comments"
                      checked={shareConfig.allowComments}
                      onCheckedChange={(checked) =>
                        setShareConfig(prev => ({ ...prev, allowComments: !!checked }))
                      }
                    />
                    <Label htmlFor="comments" className="text-sm">
                      Allow comments
                    </Label>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="download"
                      checked={shareConfig.allowDownload}
                      onCheckedChange={(checked) =>
                        setShareConfig(prev => ({ ...prev, allowDownload: !!checked }))
                      }
                    />
                    <Label htmlFor="download" className="text-sm">
                      Allow download
                    </Label>
                  </div>
                </div>
              </div>

              <div className="flex gap-2 pt-2">
                <Button 
                  onClick={handleShare} 
                  disabled={isSharing}
                  className="flex-1"
                >
                  {isSharing ? 'Creating Link...' : 'Create Share Link'}
                </Button>
                <Button 
                  variant="outline" 
                  onClick={() => setShareDialogOpen(false)}
                >
                  Cancel
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="link" className="space-y-4">
              {shareUrl && (
                <>
                  <div className="space-y-2">
                    <Label>Share Link</Label>
                    <div className="flex gap-2">
                      <Input
                        value={shareUrl}
                        readOnly
                        className="font-mono text-sm"
                      />
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => copyToClipboard(shareUrl)}
                      >
                        <Copy className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        const subject = `Shared Conversation: ${thread.title}`;
                        const body = `I've shared a conversation with you: ${shareUrl}`;
                        window.open(`mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`);
                      }}
                    >
                      <Mail className="h-4 w-4 mr-2" />
                      Email
                    </Button>
                    
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => copyToClipboard(shareUrl)}
                    >
                      <Link className="h-4 w-4 mr-2" />
                      Copy Link
                    </Button>
                  </div>

                  <Card>
                    <CardContent className="p-3">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <Shield className="h-4 w-4" />
                        <span>
                          {shareConfig.type === 'public' ? 'Anyone with this link can view the conversation' :
                           shareConfig.type === 'team' ? 'Only team members can access this link' :
                           'Password required to access this link'}
                        </span>
                      </div>
                      {shareConfig.expiresAt && (
                        <div className="flex items-center gap-2 text-sm text-muted-foreground mt-1">
                          <Calendar className="h-4 w-4" />
                          <span>Expires {format(shareConfig.expiresAt, 'MMM dd, yyyy')}</span>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </>
              )}
            </TabsContent>
          </Tabs>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default ConversationExportShare;