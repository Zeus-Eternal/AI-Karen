#!/usr/bin/env python3
"""
Verify Extension Health Monitoring Implementation

This script verifies that the extension health monitoring system has been
properly implemented according to the task requirements.

Task 12: Extend existing health monitoring system for extensions
- Integrate extension health checks with existing /health endpoint in server/app.py
- Extend existing database health monitoring to include extension services  
- Add extension status to existing service registry health reporting
- Leverage existing health check patterns and monitoring infrastructure
"""

import sys
from pathlib import Path

# Add the project root to the Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def verify_extension_health_monitor():
    """Verify the extension health monitor module exists and has required functionality"""
    print("‚úÖ Verifying Extension Health Monitor Module...")
    
    try:
        from server.extension_health_monitor import (
            ExtensionHealthMonitor,
            ExtensionHealthStatus,
            ExtensionHealthMetrics,
            ExtensionSystemHealth,
            get_extension_health_monitor,
            initialize_extension_health_monitor,
            shutdown_extension_health_monitor
        )
        
        # Check that the ExtensionHealthMonitor class has required methods
        required_methods = [
            'start_monitoring',
            'stop_monitoring', 
            'check_extension_system_health',
            'get_extension_health_for_api',
            'check_specific_extension_health'
        ]
        
        for method in required_methods:
            assert hasattr(ExtensionHealthMonitor, method), f"Missing method: {method}"
        
        # Check that ExtensionHealthStatus enum has required values
        required_statuses = ['HEALTHY', 'DEGRADED', 'UNHEALTHY', 'UNKNOWN']
        for status in required_statuses:
            assert hasattr(ExtensionHealthStatus, status), f"Missing status: {status}"
        
        print("   ‚úì ExtensionHealthMonitor class implemented with required methods")
        print("   ‚úì ExtensionHealthStatus enum has required values")
        print("   ‚úì Global functions for initialization and access implemented")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Failed to import extension health monitor: {e}")
        return False
    except AssertionError as e:
        print(f"   ‚ùå Missing required functionality: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå Unexpected error: {e}")
        return False


def verify_health_endpoints_integration():
    """Verify that health endpoints have been extended with extension health checks"""
    print("‚úÖ Verifying Health Endpoints Integration...")
    
    try:
        # Check that health_endpoints.py has been updated
        health_endpoints_file = Path("server/health_endpoints.py")
        if not health_endpoints_file.exists():
            print("   ‚ùå server/health_endpoints.py not found")
            return False
        
        content = health_endpoints_file.read_text()
        
        # Check for extension health function
        if "_check_extension_system_health" not in content:
            print("   ‚ùå _check_extension_system_health function not found")
            return False
        
        # Check for extension health endpoints
        required_endpoints = [
            "/api/health/extensions",
            "/api/health/extensions/{extension_name}"
        ]
        
        for endpoint in required_endpoints:
            if endpoint not in content:
                print(f"   ‚ùå Endpoint {endpoint} not found")
                return False
        
        # Check that comprehensive health includes extensions
        if "extension_system_health" not in content:
            print("   ‚ùå Extension system health not integrated into comprehensive health check")
            return False
        
        print("   ‚úì Extension health check function implemented")
        print("   ‚úì Extension-specific health endpoints added")
        print("   ‚úì Extension health integrated into comprehensive health check")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error verifying health endpoints: {e}")
        return False


def verify_app_integration():
    """Verify that server/app.py has been updated to include extension health"""
    print("‚úÖ Verifying App Integration...")
    
    try:
        app_file = Path("server/app.py")
        if not app_file.exists():
            print("   ‚ùå server/app.py not found")
            return False
        
        content = app_file.read_text()
        
        # Check for extension health in main health endpoint
        if "extension_system" not in content:
            print("   ‚ùå Extension system not included in main health endpoint")
            return False
        
        # Check for extension health monitor initialization
        if "initialize_extension_health_monitor" not in content:
            print("   ‚ùå Extension health monitor initialization not found")
            return False
        
        # Check for extension health monitor shutdown
        if "shutdown_extension_health_monitor" not in content:
            print("   ‚ùå Extension health monitor shutdown not found")
            return False
        
        # Check for extension health in database monitor endpoint
        if "extension_services" not in content:
            print("   ‚ùå Extension services not included in database monitor endpoint")
            return False
        
        print("   ‚úì Extension health integrated into main /health endpoint")
        print("   ‚úì Extension health monitor lifecycle management implemented")
        print("   ‚úì Extension health included in database monitor endpoint")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error verifying app integration: {e}")
        return False


def verify_enhanced_database_health_integration():
    """Verify integration with enhanced database health monitoring"""
    print("‚úÖ Verifying Enhanced Database Health Integration...")
    
    try:
        enhanced_file = Path("server/enhanced_database_health_monitor.py")
        if not enhanced_file.exists():
            print("   ‚ùå server/enhanced_database_health_monitor.py not found")
            return False
        
        content = enhanced_file.read_text()
        
        # Check for extension service health tracking
        if "ExtensionServiceHealth" not in content:
            print("   ‚ùå ExtensionServiceHealth class not found")
            return False
        
        # Check for extension-specific health methods
        if "check_extension_service_health" not in content:
            print("   ‚ùå Extension service health check method not found")
            return False
        
        # Check for interference detection
        if "interference_detected" not in content:
            print("   ‚ùå Interference detection not implemented")
            return False
        
        print("   ‚úì ExtensionServiceHealth class implemented")
        print("   ‚úì Extension service health check methods implemented")
        print("   ‚úì LLM runtime interference detection implemented")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error verifying enhanced database health integration: {e}")
        return False


def verify_extension_integration_updates():
    """Verify that extension integration has been updated for health monitoring"""
    print("‚úÖ Verifying Extension Integration Updates...")
    
    try:
        integration_file = Path("src/extensions/integration.py")
        if not integration_file.exists():
            print("   ‚ùå src/extensions/integration.py not found")
            return False
        
        content = integration_file.read_text()
        
        # Check for app state storage
        if "app.state.extension_system" not in content:
            print("   ‚ùå Extension system not stored in app state")
            return False
        
        print("   ‚úì Extension system stored in app state for health monitoring access")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error verifying extension integration updates: {e}")
        return False


def main():
    """Run all verification checks"""
    print("üîç Verifying Extension Health Monitoring Implementation")
    print("=" * 60)
    
    checks = [
        verify_extension_health_monitor,
        verify_health_endpoints_integration,
        verify_app_integration,
        verify_enhanced_database_health_integration,
        verify_extension_integration_updates,
    ]
    
    results = []
    for check in checks:
        try:
            result = check()
            results.append(result)
            print()
        except Exception as e:
            print(f"   ‚ùå Check {check.__name__} failed with exception: {e}")
            results.append(False)
            print()
    
    # Summary
    passed = sum(results)
    total = len(results)
    
    print("=" * 60)
    print(f"üìä Verification Results: {passed}/{total} checks passed")
    
    if passed == total:
        print("üéâ All extension health monitoring implementation checks passed!")
        print("\n‚úÖ Task 12 Implementation Summary:")
        print("   ‚Ä¢ Extension health monitoring system implemented")
        print("   ‚Ä¢ Integration with existing /health endpoint completed")
        print("   ‚Ä¢ Extension health added to database health monitoring")
        print("   ‚Ä¢ Extension status integrated into service registry health reporting")
        print("   ‚Ä¢ Leveraged existing health check patterns and monitoring infrastructure")
        print("   ‚Ä¢ Extension-specific health endpoints added")
        print("   ‚Ä¢ Proper lifecycle management implemented")
        return True
    else:
        print(f"‚ùå {total - passed} implementation checks failed")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)