Metadata-Version: 2.4
Name: ai-karen
Version: 0.1.0
Summary: Kari AI modular engine
Author: Kari AI Team
License: Mozilla Public License Version 2.0
        ==================================
        
        1. Definitions
        --------------
        
        1.1. "Contributor"
            means each individual or legal entity that creates, contributes to
            the creation of, or owns Covered Software.
        
        1.2. "Contributor Version"
            means the combination of the Contributions of others (if any) used
            by a Contributor and that particular Contributor's Contribution.
        
        1.3. "Contribution"
            means Covered Software of a particular Contributor.
        
        1.4. "Covered Software"
            means Source Code Form to which the initial Contributor has attached
            the notice in Exhibit A, the Executable Form of such Source Code
            Form, and Modifications of such Source Code Form, in each case
            including portions thereof.
        
        1.5. "Incompatible With Secondary Licenses"
            means
        
            (a) that the initial Contributor has attached the notice described
                in Exhibit B to the Covered Software; or
        
            (b) that the Covered Software was made available under the terms of
                version 1.1 or earlier of the License, but not also under the
                terms of a Secondary License.
        
        1.6. "Executable Form"
            means any form of the work other than Source Code Form.
        
        1.7. "Larger Work"
            means a work that combines Covered Software with other material, in 
            a separate file or files, that is not Covered Software.
        
        1.8. "License"
            means this document.
        
        1.9. "Licensable"
            means having the right to grant, to the maximum extent possible,
            whether at the time of the initial grant or subsequently, any and
            all of the rights conveyed by this License.
        
        1.10. "Modifications"
            means any of the following:
        
            (a) any file in Source Code Form that results from an addition to,
                deletion from, or modification of the contents of Covered
                Software; or
        
            (b) any new file in Source Code Form that contains any Covered
                Software.
        
        1.11. "Patent Claims" of a Contributor
            means any patent claim(s), including without limitation, method,
            process, and apparatus claims, in any patent Licensable by such
            Contributor that would be infringed, but for the grant of the
            License, by the making, using, selling, offering for sale, having
            made, import, or transfer of either its Contributions or its
            Contributor Version.
        
        1.12. "Secondary License"
            means either the GNU General Public License, Version 2.0, the GNU
            Lesser General Public License, Version 2.1, the GNU Affero General
            Public License, Version 3.0, or any later versions of those
            licenses.
        
        1.13. "Source Code Form"
            means the form of the work preferred for making modifications.
        
        1.14. "You" (or "Your")
            means an individual or a legal entity exercising rights under this
            License. For legal entities, "You" includes any entity that
            controls, is controlled by, or is under common control with You. For
            purposes of this definition, "control" means (a) the power, direct
            or indirect, to cause the direction or management of such entity,
            whether by contract or otherwise, or (b) ownership of more than
            fifty percent (50%) of the outstanding shares or beneficial
            ownership of such entity.
        
        2. License Grants and Conditions
        --------------------------------
        
        2.1. Grants
        
        Each Contributor hereby grants You a world-wide, royalty-free,
        non-exclusive license:
        
        (a) under intellectual property rights (other than patent or trademark)
            Licensable by such Contributor to use, reproduce, make available,
            modify, display, perform, distribute, and otherwise exploit its
            Contributions, either on an unmodified basis, with Modifications, or
            as part of a Larger Work; and
        
        (b) under Patent Claims of such Contributor to make, use, sell, offer
            for sale, have made, import, and otherwise transfer either its
            Contributions or its Contributor Version.
        
        2.2. Effective Date
        
        The licenses granted in Section 2.1 with respect to any Contribution
        become effective for each Contribution on the date the Contributor first
        distributes such Contribution.
        
        2.3. Limitations on Grant Scope
        
        The licenses granted in this Section 2 are the only rights granted under
        this License. No additional rights or licenses will be implied from the
        distribution or licensing of Covered Software under this License.
        Notwithstanding Section 2.1(b) above, no patent license is granted by a
        Contributor:
        
        (a) for any code that a Contributor has removed from Covered Software;
            or
        
        (b) for infringements caused by: (i) Your and any other third party's
            modifications of Covered Software, or (ii) the combination of its
            Contributions with other software (except as part of its Contributor
            Version); or
        
        (c) under Patent Claims infringed by Covered Software in the absence of
            its Contributions.
        
        This License does not grant any rights in the trademarks, service marks,
        or logos of any Contributor (except as may be necessary to comply with
        the notice requirements in Section 3.4).
        
        2.4. Subsequent Licenses
        
        No Contributor makes additional grants as a result of Your choice to
        distribute the Covered Software under a subsequent version of this
        License (see Section 10.2) or under the terms of a Secondary License (if
        permitted under the terms of Section 3.3).
        
        2.5. Representation
        
        Each Contributor represents that the Contributor believes its
        Contributions are its original creation(s) or it has sufficient rights
        to grant the rights to its Contributions conveyed by this License.
        
        2.6. Fair Use
        
        This License is not intended to limit any rights You have under
        applicable copyright doctrines of fair use, fair dealing, or other
        equivalents.
        
        2.7. Conditions
        
        Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted
        in Section 2.1.
        
        3. Responsibilities
        -------------------
        
        3.1. Distribution of Source Form
        
        All distribution of Covered Software in Source Code Form, including any
        Modifications that You create or to which You contribute, must be under
        the terms of this License. You must inform recipients that the Source
        Code Form of the Covered Software is governed by the terms of this
        License, and how they can obtain a copy of this License. You may not
        attempt to alter or restrict the recipients' rights in the Source Code
        Form.
        
        3.2. Distribution of Executable Form
        
        If You distribute Covered Software in Executable Form then:
        
        (a) such Covered Software must also be made available in Source Code
            Form, as described in Section 3.1, and You must inform recipients of
            the Executable Form how they can obtain a copy of such Source Code
            Form by reasonable means in a timely manner, at a charge no more
            than the cost of distribution to the recipient; and
        
        (b) You may distribute such Executable Form under the terms of this
            License, or sublicense it under different terms, provided that the
            license for the Executable Form does not attempt to limit or alter
            the recipients' rights in the Source Code Form under this License.
        
        3.3. Distribution of a Larger Work
        
        You may create and distribute a Larger Work under terms of Your choice,
        provided that You also comply with the requirements of this License for
        the Covered Software. If the Larger Work is a combination of Covered
        Software with a work governed by one or more Secondary Licenses, and the
        Covered Software is not Incompatible With Secondary Licenses, this
        License permits You to additionally distribute such Covered Software
        under the terms of such Secondary License(s), so that the recipient of
        the Larger Work may, at their option, further distribute the Covered
        Software under the terms of either this License or such Secondary
        License(s).
        
        3.4. Notices
        
        You may not remove or alter the substance of any license notices
        (including copyright notices, patent notices, disclaimers of warranty,
        or limitations of liability) contained within the Source Code Form of
        the Covered Software, except that You may alter any license notices to
        the extent required to remedy known factual inaccuracies.
        
        3.5. Application of Additional Terms
        
        You may choose to offer, and to charge a fee for, warranty, support,
        indemnity or liability obligations to one or more recipients of Covered
        Software. However, You may do so only on Your own behalf, and not on
        behalf of any Contributor. You must make it absolutely clear that any
        such warranty, support, indemnity, or liability obligation is offered by
        You alone, and You hereby agree to indemnify every Contributor for any
        liability incurred by such Contributor as a result of warranty, support,
        indemnity or liability terms You offer. You may include additional
        disclaimers of warranty and limitations of liability specific to any
        jurisdiction.
        
        4. Inability to Comply Due to Statute or Regulation
        ---------------------------------------------------
        
        If it is impossible for You to comply with any of the terms of this
        License with respect to some or all of the Covered Software due to
        statute, judicial order, or regulation then You must: (a) comply with
        the terms of this License to the maximum extent possible; and (b)
        describe the limitations and the code they affect. Such description must
        be placed in a text file included with all distributions of the Covered
        Software under this License. Except to the extent prohibited by statute
        or regulation, such description must be sufficiently detailed for a
        recipient of ordinary skill to be able to understand it.
        
        5. Termination
        --------------
        
        5.1. The rights granted under this License will terminate automatically
        if You fail to comply with any of its terms. However, if You become
        compliant, then the rights granted under this License from a particular
        Contributor are reinstated (a) provisionally, unless and until such
        Contributor explicitly and finally terminates Your grants, and (b) on an
        ongoing basis, if such Contributor fails to notify You of the
        non-compliance by some reasonable means prior to 60 days after You have
        come back into compliance. Moreover, Your grants from a particular
        Contributor are reinstated on an ongoing basis if such Contributor
        notifies You of the non-compliance by some reasonable means, this is the
        first time You have received notice of non-compliance with this License
        from such Contributor, and You become compliant prior to 30 days after
        Your receipt of the notice.
        
        5.2. If You initiate litigation against any entity by asserting a patent
        infringement claim (excluding declaratory judgment actions,
        counter-claims, and cross-claims) alleging that a Contributor Version
        directly or indirectly infringes any patent, then the rights granted to
        You by any and all Contributors for the Covered Software under Section
        2.1 of this License shall terminate.
        
        5.3. In the event of termination under Sections 5.1 or 5.2 above, all
        end user license agreements (excluding distributors and resellers) which
        have been validly granted by You or Your distributors under this License
        prior to termination shall survive termination.
        
        ************************************************************************
        *                                                                      *
        *  6. Disclaimer of Warranty                                           *
        *  -------------------------                                           *
        *                                                                      *
        *  Covered Software is provided under this License on an "as is"       *
        *  basis, without warranty of any kind, either expressed, implied, or  *
        *  statutory, including, without limitation, warranties that the       *
        *  Covered Software is free of defects, merchantable, fit for a        *
        *  particular purpose or non-infringing. The entire risk as to the     *
        *  quality and performance of the Covered Software is with You.        *
        *  Should any Covered Software prove defective in any respect, You     *
        *  (not any Contributor) assume the cost of any necessary servicing,   *
        *  repair, or correction. This disclaimer of warranty constitutes an   *
        *  essential part of this License. No use of any Covered Software is   *
        *  authorized under this License except under this disclaimer.         *
        *                                                                      *
        ************************************************************************
        
        ************************************************************************
        *                                                                      *
        *  7. Limitation of Liability                                          *
        *  --------------------------                                          *
        *                                                                      *
        *  Under no circumstances and under no legal theory, whether tort      *
        *  (including negligence), contract, or otherwise, shall any           *
        *  Contributor, or anyone who distributes Covered Software as          *
        *  permitted above, be liable to You for any direct, indirect,         *
        *  special, incidental, or consequential damages of any character      *
        *  including, without limitation, damages for lost profits, loss of    *
        *  goodwill, work stoppage, computer failure or malfunction, or any    *
        *  and all other commercial damages or losses, even if such party      *
        *  shall have been informed of the possibility of such damages. This   *
        *  limitation of liability shall not apply to liability for death or   *
        *  personal injury resulting from such party's negligence to the       *
        *  extent applicable law prohibits such limitation. Some               *
        *  jurisdictions do not allow the exclusion or limitation of           *
        *  incidental or consequential damages, so this exclusion and          *
        *  limitation may not apply to You.                                    *
        *                                                                      *
        ************************************************************************
        
        8. Litigation
        -------------
        
        Any litigation relating to this License may be brought only in the
        courts of a jurisdiction where the defendant maintains its principal
        place of business and such litigation shall be governed by laws of that
        jurisdiction, without reference to its conflict-of-law provisions.
        Nothing in this Section shall prevent a party's ability to bring
        cross-claims or counter-claims.
        
        9. Miscellaneous
        ----------------
        
        This License represents the complete agreement concerning the subject
        matter hereof. If any provision of this License is held to be
        unenforceable, such provision shall be reformed only to the extent
        necessary to make it enforceable. Any law or regulation which provides
        that the language of a contract shall be construed against the drafter
        shall not be used to construe this License against a Contributor.
        
        10. Versions of the License
        ---------------------------
        
        10.1. New Versions
        
        Mozilla Foundation is the license steward. Except as provided in Section
        10.3, no one other than the license steward has the right to modify or
        publish new versions of this License. Each version will be given a
        distinguishing version number.
        
        10.2. Effect of New Versions
        
        You may distribute the Covered Software under the terms of the version
        of the License under which You originally received the Covered Software,
        or under the terms of any subsequent version published by the license
        steward.
        
        10.3. Modified Versions
        
        If you create software not governed by this License, and you want to
        create a new license for such software, you may create and use a
        modified version of this License if you rename the license and remove
        any references to the name of the license steward (except to note that
        such modified license differs from this License).
        
        10.4. Distributing Source Code Form that is Incompatible With Secondary
        Licenses
        
        If You choose to distribute Source Code Form that is Incompatible With
        Secondary Licenses under the terms of this version of the License, the
        notice described in Exhibit B of this License must be attached.
        
        Exhibit A - Source Code Form License Notice
        -------------------------------------------
        
          This Source Code Form is subject to the terms of the Mozilla Public
          License, v. 2.0. If a copy of the MPL was not distributed with this
          file, You can obtain one at http://mozilla.org/MPL/2.0/.
        
        If it is not possible or desirable to put the notice in a particular
        file, then You may include the notice in a location (such as a LICENSE
        file in a relevant directory) where a recipient would be likely to look
        for such a notice.
        
        You may add additional accurate notices of copyright ownership.
        
        Exhibit B - "Incompatible With Secondary Licenses" Notice
        ---------------------------------------------------------
        
          This Source Code Form is "Incompatible With Secondary Licenses", as
          defined by the Mozilla Public License, v. 2.0.
        
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: LICENSE-commercial.txt
License-File: LICENSE.md
Dynamic: license-file

# AI-Karen: Production AI Platform
[![CI](https://github.com/OWNER/AI-Karen/actions/workflows/ci.yml/badge.svg)](https://github.com/OWNER/AI-Karen/actions/workflows/ci.yml)

> **Enterprise-ready AI platform with modular architecture, multi-database support, and comprehensive UI ecosystem.**
> AI-Karen provides a production-grade FastAPI backend with multiple frontend interfaces, extensive plugin system, and robust data infrastructure for scalable AI applications.

AI-Karen is a comprehensive, production-ready AI platform designed for enterprise deployments. The system features a modular architecture with FastAPI backend, multiple UI interfaces, extensive plugin ecosystem, and robust multi-database infrastructure optimized for AI workloads.

---

## Overview

**Core Platform Features:**
* **FastAPI Backend** - Production-grade REST API with comprehensive endpoint coverage (106+ endpoints)
* **Multi-Database Architecture** - PostgreSQL, Redis, DuckDB, Milvus, and Elasticsearch integration
* **Plugin Ecosystem** - 24+ plugins with hot-reload capability and marketplace integration
* **Extension System** - Modular extensions for analytics, automation, and workflow building
* **Multiple UI Interfaces** - Web (Next.js), Desktop (Tauri), and Streamlit applications
* **AI/ML Integration** - HuggingFace Transformers, OpenAI API, local LLM support via llama-cpp-python
* **Production Monitoring** - Prometheus metrics, health checks, and comprehensive logging
* **Authentication & Security** - JWT-based auth, role-based access control, tenant isolation
* **Container Orchestration** - Docker Compose setup with service discovery and health monitoring

**Technology Stack:**
* **Backend**: FastAPI, Python 3.10+, Pydantic, SQLAlchemy, Alembic
* **Databases**: PostgreSQL 15, Redis 7, Elasticsearch 8.9, Milvus 2.3, DuckDB
* **Frontend**: Next.js 15.2.3, React 18, Tauri 2.5, Streamlit
* **AI/ML**: HuggingFace Transformers, llama-cpp-python, scikit-learn 1.5, spaCy 3.7
* **Infrastructure**: Docker, Prometheus, nginx (optional), Kubernetes support

---

## Architecture

### System Components

```
┌─────────────────────────────────────────────────────────────────┐
│                        Frontend Layer                           │
├─────────────────┬─────────────────┬─────────────────────────────┤
│   Web UI        │  Desktop UI     │     Streamlit UI            │
│  (Next.js)      │   (Tauri)       │   (Modern Interface)        │
│  Port: 9002     │  Native App     │   Port: 8501                │
└─────────────────┴─────────────────┴─────────────────────────────┘
                              │
┌─────────────────────────────────────────────────────────────────┐
│                     FastAPI Backend                             │
│                      Port: 8000                                 │
├─────────────────────────────────────────────────────────────────┤
│  • REST API (106+ endpoints)    • Plugin System (24+ plugins)  │
│  • Authentication & RBAC        • Extension System             │
│  • Multi-tenant Support         • Health Monitoring            │
│  • Prometheus Metrics           • Event Bus                    │
└─────────────────────────────────────────────────────────────────┘
                              │
┌─────────────────────────────────────────────────────────────────┐
│                    Database Layer                               │
├─────────────┬─────────────┬─────────────┬─────────────┬─────────┤
│ PostgreSQL  │   Redis     │   Milvus    │ Elasticsearch│ DuckDB  │
│ Port: 5432  │ Port: 6379  │Port: 19530  │ Port: 9200   │ Local   │
│ (Metadata)  │ (Cache)     │ (Vectors)   │ (Search)     │(Analytics)│
└─────────────┴─────────────┴─────────────┴─────────────┴─────────┘
```

### Key Architectural Principles

1. **Modular Design** - Loosely coupled components with clear interfaces
2. **Horizontal Scalability** - Database services can be scaled independently
3. **Plugin Architecture** - Hot-reloadable plugins with manifest-based configuration
4. **Multi-UI Support** - Different interfaces for different use cases
5. **Production Ready** - Comprehensive monitoring, logging, and health checks

---

## Quick Start

### Prerequisites

* **Docker & Docker Compose** - For containerized services
* **Python 3.10+** - For backend development
* **Node.js 18+** - For frontend development
* **Rust toolchain** - For Tauri desktop builds (optional)

### 1. Clone and Setup

```bash
# Clone repository
git clone <repository-url>
cd AI-Karen

# Install Python dependencies
./scripts/install.sh

# Download AI models (optional)
python scripts/install_models.py
```

### 2. Start Infrastructure Services

```bash
# Start all database services
docker compose up -d postgres redis elasticsearch milvus

# Wait for services to be ready
./scripts/health-check.sh
```

### 3. Initialize Databases

```bash

# Initialize PostgreSQL schema
docker compose exec postgres psql -U postgres -d postgres -f /docker-entrypoint-initdb.d/001_create_tables.sql
# Create memory_entries table
docker compose exec postgres psql -U postgres -d postgres -f /docker-entrypoint-initdb.d/004_create_memory_entries_table.sql

# Apply PostgreSQL migrations (creates all tables including `memory_entries`)
./docker/database/scripts/migrate.sh --service postgres

# Create Elasticsearch index
curl -X PUT "http://localhost:9200/ai_karen_index"
```

### 4. Start Backend API

```bash
# Start FastAPI server
uvicorn main:app --reload --host 0.0.0.0 --port 8000

# Verify API is running
curl http://localhost:8000/health
```

### 5. Start Frontend (Choose One)

#### Web UI (Next.js)
```bash
cd ui_launchers/web_ui
npm install
npm run dev
# Access at http://localhost:9002
```

#### Desktop UI (Tauri)
```bash
cd ui_launchers/desktop_ui
npm install
npm run tauri dev
# Native desktop application launches
```

#### Streamlit UI
```bash
cd ui_launchers/streamlit_ui
pip install -r requirements.txt
streamlit run app.py
# Access at http://localhost:8501
```

### 6. Verify Installation

```bash
# Run system health check
python cli.py --self-test

# Run test suite
pytest -v

# Check all services
curl http://localhost:8000/api/health/summary
```

### Running Demo Scripts

Run the example demos with the project source on your `PYTHONPATH`:

```bash
PYTHONPATH=src python demo_plugin_system.py
PYTHONPATH=src python demo_tool_system.py
PYTHONPATH=src python demo_analytics_dashboard.py
```

---

## Development Setup

### Local Development Environment

```bash
# Install development dependencies
pip install -e .
pip install -r requirements.txt

# Install pre-commit hooks
pre-commit install

# Set environment variables
export POSTGRES_USER=karen_user
export POSTGRES_PASSWORD=karen_secure_pass_change_me
export POSTGRES_DB=ai_karen
export POSTGRES_HOST=postgres  # use 'postgres' when running via Docker
export POSTGRES_PORT=5432
export REDIS_URL=redis://localhost:6379/0
export ELASTICSEARCH_URL=http://localhost:9200
export MILVUS_HOST=localhost
export MILVUS_PORT=19530
```

### Development Commands

| Task | Command |
|------|---------|
| Format code | `black .` |
| Type checking | `mypy .` |
| Linting | `ruff check .` |
| Run tests | `pytest` |
| Start API | `uvicorn main:app --reload` |
| Build web UI | `cd ui_launchers/web_ui && npm run build` |
| Build desktop | `cd ui_launchers/desktop_ui && npm run tauri build` |

### Demo Scripts

When running the example demo scripts directly from the repository, set
`PYTHONPATH=src` so the `ai_karen_engine` package can be imported without
modifying `sys.path` inside the scripts:

```bash
PYTHONPATH=src python demo_plugin_system.py
```

### Plugin Development

Create a new plugin in `src/ai_karen_engine/plugins/`:

```bash
mkdir src/ai_karen_engine/plugins/my_plugin
```

**plugin_manifest.json:**
```json
{
  "name": "my_plugin",
  "description": "My custom plugin",
  "plugin_api_version": "0.1.0",
  "required_roles": ["user"],
  "intent": ["my_intent"]
}
```

**handler.py:**
```python
def run(message, context):
    return {
        "intent": "my_intent",
        "confidence": 1.0,
        "response": f"Hello from my_plugin! Message: {message}"
    }
```

Plugins are automatically discovered and hot-reloaded.

---

## Production Deployment

### Docker Compose (Recommended)

```bash
# Production deployment
docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

# With custom environment
cp .env.example .env
# Edit .env with production values
docker compose --env-file .env up -d
```

### Kubernetes Deployment

```bash
# Using Helm chart
helm install ai-karen ./charts/kari/ \
  --set image.tag=latest \
  --set postgresql.enabled=true \
  --set redis.enabled=true
```

### Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| `POSTGRES_USER` | PostgreSQL user | `karen_user` |
| `POSTGRES_PASSWORD` | PostgreSQL password | `karen_secure_pass_change_me` |
| `POSTGRES_DB` | PostgreSQL database | `ai_karen` |
| `POSTGRES_HOST` | PostgreSQL host | `postgres` |
| `POSTGRES_PORT` | PostgreSQL port | `5432` |
| `REDIS_URL` | Redis connection string | `redis://localhost:6379/0` |
| `ELASTICSEARCH_URL` | Elasticsearch URL | `http://localhost:9200` |
| `MILVUS_HOST` | Milvus host | `localhost` |
| `MILVUS_PORT` | Milvus port | `19530` |
| `JWT_SECRET_KEY` | JWT signing key | `your-secret-key` |
| `ENABLE_SELF_REFACTOR` | Enable self-refactoring | `false` |
| `LOG_LEVEL` | Logging level | `INFO` |
| `KARI_CORS_ORIGINS` | Comma-separated list of allowed CORS origins | `*` |
| `KARI_CORS_METHODS` | Allowed CORS HTTP methods (comma-separated or `*`) | `*` |
| `KARI_CORS_HEADERS` | Allowed CORS request headers (comma-separated or `*`) | `*` |
| `KARI_CORS_CREDENTIALS` | Whether to allow credentials in CORS requests | `true` |
| `KARI_ECO_MODE` | Skip heavy NLP model loading | `false` |
| `KARI_MEMORY_SURPRISE_THRESHOLD` | Novelty threshold for storing memory | `0.85` |
| `KARI_DISABLE_MEMORY_SURPRISE_FILTER` | Disable surprise filtering to store all memories | `false` |

---

## API Reference

### Core Endpoints

| Method | Endpoint | Description |
|--------|----------|-------------|
| `GET` | `/health` | System health check |
| `GET` | `/ready` | Readiness probe |
| `GET` | `/metrics` | Application metrics |
| `GET` | `/metrics/prometheus` | Prometheus metrics |
| `POST` | `/chat` | Chat completion |
| `POST` | `/store` | Store memory |
| `POST` | `/search` | Search memories |
| `GET` | `/plugins` | List plugins |
| `GET` | `/models` | List AI models |

The memory query endpoint (`/api/memory/query`) returns at most **100 results** by default.
You can override this cap by providing the `result_limit` parameter in your request.

### Tenant Header

Most API endpoints are tenant-aware. Include an `X-Tenant-ID` header with your
tenant name in requests that are not listed under the public paths. For local
testing you can use `default`:

```bash
curl -H "X-Tenant-ID: default" \
     -H "Authorization: Bearer <token>" \
     -H "Content-Type: application/json" \
     -d '{"text": "hello"}' http://localhost:8000/chat
```

### Authentication

```bash
# Login
curl -X POST http://localhost:8000/login \
  -H "Content-Type: application/json" \
  -d '{"username": "user", "password": "pass"}'

# Use token
curl -H "Authorization: Bearer <token>" \
  http://localhost:8000/chat
```

### Plugin Management

```bash
# List plugins
curl http://localhost:8000/plugins

# Enable plugin
curl -X POST http://localhost:8000/plugins/my_plugin/enable

# Reload plugins
curl -X POST http://localhost:8000/plugins/reload
```

---

## Monitoring & Observability

### Health Checks

```bash
# System health
curl http://localhost:8000/health

# Detailed health summary
curl http://localhost:8000/api/health/summary

# Service-specific health
curl http://localhost:8000/api/services/postgres/health
```

### Metrics

The system exposes Prometheus metrics at `/metrics/prometheus`:

* HTTP request metrics
* Database connection metrics
* Plugin execution metrics
* Memory usage metrics
* AI model performance metrics

### Logging

Structured logging with configurable levels. The server runs at `INFO` level by
default and prints `Greetings, the logs are ready for review` once startup
completes.

```bash
# Increase verbosity if needed
export LOG_LEVEL=DEBUG

# View logs
docker compose logs -f api
```

---

## Troubleshooting

### Common Issues

#### Database Connection Issues

**Problem**: `Connection refused` errors for databases

**Solution**:
```bash
# Check service status
docker compose ps

# Restart services
docker compose restart postgres redis

# Check logs
docker compose logs postgres
```

#### Plugin Loading Failures

**Problem**: Plugins not loading or executing

**Solution**:
```bash
# Validate plugin manifest
python -c "import json; print(json.load(open('src/ai_karen_engine/plugins/my_plugin/plugin_manifest.json')))"

# Reload plugins
curl -X POST http://localhost:8000/plugins/reload

# Check plugin logs
docker compose logs api | grep plugin
```

#### Memory Issues

**Problem**: High memory usage or OOM errors

**Solution**:
```bash
# Check memory usage
docker stats

# Adjust memory limits in docker-compose.yml
# Restart with memory limits
docker compose up -d --force-recreate
```

#### Frontend Build Issues

**Problem**: UI build failures

**Solution**:
```bash
# Clear node modules
cd ui_launchers/web_ui
rm -rf node_modules package-lock.json
npm install

# Check Node.js version
node --version  # Should be 18+
```

### Performance Optimization

1. **Database Tuning**:
   - Adjust PostgreSQL `shared_buffers` and `work_mem`
   - Configure Redis `maxmemory` policy
   - Optimize Elasticsearch heap size

2. **API Performance**:
   - Enable FastAPI response caching
   - Configure connection pooling
   - Use async endpoints where possible

3. **Frontend Optimization**:
   - Enable Next.js production build optimizations
   - Configure CDN for static assets
   - Implement proper caching headers

### Getting Help

1. **Check Documentation**: Review component-specific README files
2. **System Analysis**: Run `python scripts/doc_analysis.py` for system overview
3. **Health Checks**: Use `/api/health/summary` endpoint
4. **Logs**: Check application and service logs
5. **Community**: Submit issues with system analysis output

---

## Contributing

### Development Workflow

1. Fork the repository
2. Create a feature branch
3. Make changes with tests
4. Run the full test suite
5. Submit a pull request

### Code Standards

* **Python**: Black formatting, type hints, docstrings
* **JavaScript/TypeScript**: ESLint, Prettier formatting
* **Rust**: Standard rustfmt formatting
* **Documentation**: Update README files for any architectural changes

### Testing

Install project dependencies before running tests:

```bash
pip install -r requirements.txt
```

```bash
# Run all tests
pytest

# Run specific test categories
pytest tests/services/
pytest tests/ui/

# Run with coverage
pytest --cov=src/ai_karen_engine
```

---

## License

This project is dual-licensed:
- **Mozilla Public License 2.0** for open source use
- **Commercial License** for enterprise deployments

See [LICENSE.md](LICENSE.md) and [LICENSE-commercial.txt](LICENSE-commercial.txt) for details.

---

## Documentation

### Component Documentation
- [Web UI Documentation](ui_launchers/web_ui/README.md) - Next.js web interface
- [Desktop UI Documentation](ui_launchers/desktop_ui/README.md) - Tauri desktop application  
- [Streamlit UI Documentation](ui_launchers/streamlit_ui/README.md) - Modern Streamlit interface
- [Database Documentation](docker/database/README.md) - Multi-database setup
- [Plugin Documentation](plugin_marketplace/README.md) - Plugin development guide
- [Extension Documentation](extensions/README.md) - Extension system overview

### Architecture Guides
- [API Reference](docs/api_reference.md) - Complete API documentation
- [Architecture Overview](docs/architecture.md) - System architecture details
- [Development Guide](docs/development_guide.md) - Development best practices
- [Security Framework](docs/security.md) - Security implementation
- [Memory Architecture](docs/memory_arch.md) - Memory system design
- [Plugin Specification](docs/plugin_spec.md) - Plugin development specification

### Operational Guides
- [Deployment Guide](docs/deployment.md) - Production deployment
- [Monitoring Guide](docs/observability.md) - Monitoring and observability
- [Troubleshooting Guide](docs/troubleshooting.md) - Common issues and solutions

---

*AI-Karen: Production-ready AI platform for enterprise deployments*
