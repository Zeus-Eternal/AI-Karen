#!/usr/bin/env python3
"""
Setup complete environment configuration for AI-Karen Docker services
"""

import os
import secrets
import string

def generate_secure_password(length=32):
    """Generate a secure random password"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def generate_redis_password():
    """Generate Redis password without special characters that might cause issues"""
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(24))

def create_complete_env():
    """Create complete .env file with all required variables"""
    
    print("üîß Setting up AI-Karen Environment Configuration")
    print("=" * 50)
    
    # Read existing .env
    existing_env = {}
    if os.path.exists('.env'):
        with open('.env', 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_env[key] = value
    
    # Generate secure passwords if not present
    redis_password = existing_env.get('REDIS_PASSWORD', generate_redis_password())
    postgres_password = existing_env.get('POSTGRES_PASSWORD', 'karen_secure_pass_change_me')
    minio_access_key = existing_env.get('MINIO_ACCESS_KEY', 'karen_minio_user')
    minio_secret_key = existing_env.get('MINIO_SECRET_KEY', generate_secure_password(32))
    
    # Complete environment configuration
    env_config = f"""# AI-Karen Complete Environment Configuration
# Generated by setup_environment.py

# ============================================================================
# API Configuration
# ============================================================================
NEXT_PUBLIC_API_BASE_URL=http://127.0.0.1:8000
NEXT_PUBLIC_KAREN_BACKEND_URL=http://127.0.0.1:8000
KAREN_BACKEND_URL=http://127.0.0.1:8000
API_BASE_URL=http://127.0.0.1:8000

# ============================================================================
# Environment & Debug
# ============================================================================
NODE_ENV=development
ENVIRONMENT=development
DEBUG=true
PROFILE=runtime

# ============================================================================
# Authentication & Security
# ============================================================================
AUTH_SECRET_KEY=dev-secret-key-change-in-production
JWT_SECRET=dev-jwt-secret-change-in-production
CSRF_SECRET=dev-csrf-secret-change-in-production
AUTH_ALLOW_DEV_LOGIN=true
AUTH_MODE=development

# ============================================================================
# CORS Configuration
# ============================================================================
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:8000,http://127.0.0.1:8000,http://localhost:8010,http://127.0.0.1:8010,http://10.96.136.74:8010
ALLOW_DEV_ORIGINS=true
CORS_ALLOW_ORIGIN_REGEX=^https?://.*:(\\d+)?$

# ============================================================================
# Database Configuration (PostgreSQL)
# ============================================================================
POSTGRES_PORT=5433
POSTGRES_USER=karen_user
POSTGRES_PASSWORD={postgres_password}
POSTGRES_DB=ai_karen
DATABASE_URL=postgresql://karen_user:{postgres_password}@localhost:5433/ai_karen
POSTGRES_URL=postgresql+asyncpg://karen_user:{postgres_password}@postgres:5432/ai_karen
AUTH_DATABASE_URL=postgresql+asyncpg://karen_user:{postgres_password}@postgres:5432/ai_karen

# ============================================================================
# Redis Configuration
# ============================================================================
REDIS_PASSWORD={redis_password}
REDIS_URL=redis://:{redis_password}@localhost:6380/0
REDIS_HOST=localhost
REDIS_PORT=6380

# ============================================================================
# MinIO Configuration (Object Storage)
# ============================================================================
MINIO_ACCESS_KEY={minio_access_key}
MINIO_SECRET_KEY={minio_secret_key}
MINIO_ENDPOINT=localhost:9000
MINIO_BUCKET=ai-karen-storage

# ============================================================================
# Elasticsearch Configuration
# ============================================================================
ELASTICSEARCH_HOST=localhost
ELASTICSEARCH_PORT=9200
ELASTICSEARCH_URL=http://localhost:9200

# ============================================================================
# Milvus Configuration (Vector Database)
# ============================================================================
MILVUS_HOST=localhost
MILVUS_PORT=19530
MILVUS_URL=http://localhost:19530

# ============================================================================
# Feature Flags
# ============================================================================
NEXT_PUBLIC_ENABLE_PLUGINS=true
NEXT_PUBLIC_ENABLE_MEMORY=true
NEXT_PUBLIC_ENABLE_EXPERIMENTAL=false
NEXT_PUBLIC_ENABLE_DEV_LOGIN=true

# ============================================================================
# Proxy Configuration
# ============================================================================
NEXT_PUBLIC_USE_PROXY=true
USE_PROXY=true
KAREN_USE_PROXY=true

# ============================================================================
# Performance & Monitoring
# ============================================================================
PROMETHEUS_ENABLED=true
GRAFANA_ENABLED=true
ENABLE_METRICS=true
ENABLE_HEALTH_CHECKS=true

# ============================================================================
# Development Settings
# ============================================================================
KARI_FAST_STARTUP=true
WARMUP_LLM=false
KARI_DEFER_ROUTER_WIRING=false
KARI_SKIP_STARTUP_CHECK=false
KARI_SKIP_AUTO_INIT=false
ALLOW_PUBLIC_COPILOT=true
ENABLE_SECURITY_ANALYSIS=true
AUTH_ENABLE_RATE_LIMITING=true
"""
    
    # Write the complete configuration
    with open('.env', 'w') as f:
        f.write(env_config)
    
    print("‚úÖ Complete .env file created with all required variables")
    print(f"   Redis password: {redis_password}")
    print(f"   MinIO access key: {minio_access_key}")
    print(f"   PostgreSQL password: {postgres_password}")
    
    return {
        'redis_password': redis_password,
        'postgres_password': postgres_password,
        'minio_access_key': minio_access_key,
        'minio_secret_key': minio_secret_key
    }

def create_docker_startup_script(passwords):
    """Create a script to start Docker services with proper environment"""
    
    script_content = f"""#!/bin/bash
# AI-Karen Docker Startup Script
# Generated by setup_environment.py

echo "üöÄ Starting AI-Karen Docker Services"
echo "=" * 40

# Export environment variables
export REDIS_PASSWORD="{passwords['redis_password']}"
export POSTGRES_PASSWORD="{passwords['postgres_password']}"
export MINIO_ACCESS_KEY="{passwords['minio_access_key']}"
export MINIO_SECRET_KEY="{passwords['minio_secret_key']}"

# Stop any existing services
echo "üõë Stopping existing services..."
docker compose down

# Start services in order
echo "üîÑ Starting infrastructure services..."
docker compose up -d postgres redis elasticsearch minio

# Wait for services to be ready
echo "‚è≥ Waiting for services to be ready..."
sleep 30

# Start remaining services
echo "üîÑ Starting application services..."
docker compose up -d

# Show status
echo "üìä Service Status:"
docker compose ps

echo ""
echo "‚úÖ AI-Karen services started!"
echo "üåê Frontend: http://localhost:8010"
echo "üîó Backend API: http://localhost:8000"
echo "üìä Grafana: http://localhost:3001"
echo "üìà Prometheus: http://localhost:9090"
echo "üóÑÔ∏è  MinIO: http://localhost:9000"
"""
    
    with open('start_docker_services.sh', 'w') as f:
        f.write(script_content)
    
    os.chmod('start_docker_services.sh', 0o755)
    print("üìù Created start_docker_services.sh script")

def create_backend_startup_script(passwords):
    """Create script to start backend with proper environment"""
    
    script_content = f"""#!/bin/bash
# AI-Karen Backend Startup Script with CORS Fix
# Generated by setup_environment.py

echo "üöÄ Starting AI-Karen Backend with CORS Fix"
echo "=" * 45

# Export all required environment variables
export REDIS_PASSWORD="{passwords['redis_password']}"
export POSTGRES_PASSWORD="{passwords['postgres_password']}"
export CORS_ORIGINS="http://localhost:3000,http://localhost:8020,http://localhost:8010,http://10.96.136.74:8010"
export ALLOW_DEV_ORIGINS=true
export CORS_ALLOW_ORIGIN_REGEX='^https?://.*:(\\d+)?$'
export AUTH_ALLOW_DEV_LOGIN=true
export AUTH_MODE=development
export ENVIRONMENT=development

echo "üîß Environment configured:"
echo "   CORS Origins: $CORS_ORIGINS"
echo "   Dev Origins: $ALLOW_DEV_ORIGINS"
echo "   Auth Mode: $AUTH_MODE"
echo ""

echo "üîÑ Starting backend..."
python start.py
"""
    
    with open('start_backend_with_cors.sh', 'w') as f:
        f.write(script_content)
    
    os.chmod('start_backend_with_cors.sh', 0o755)
    print("üìù Created start_backend_with_cors.sh script")

def test_environment():
    """Test if environment is properly configured"""
    
    print("\\nüß™ Testing Environment Configuration")
    print("-" * 40)
    
    required_vars = [
        'REDIS_PASSWORD', 'POSTGRES_PASSWORD', 
        'MINIO_ACCESS_KEY', 'MINIO_SECRET_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Missing variables: {', '.join(missing_vars)}")
        print("   Run: source .env")
    else:
        print("‚úÖ All required environment variables are set")
    
    return len(missing_vars) == 0

def main():
    """Main setup function"""
    
    print("üîß AI-Karen Environment Setup")
    print("=" * 30)
    
    # Create complete environment
    passwords = create_complete_env()
    
    # Create startup scripts
    create_docker_startup_script(passwords)
    create_backend_startup_script(passwords)
    
    print("\\nüìã Next Steps:")
    print("1. Start Docker services:")
    print("   ./start_docker_services.sh")
    print("")
    print("2. Start backend with CORS fix:")
    print("   ./start_backend_with_cors.sh")
    print("")
    print("3. Access your application:")
    print("   Frontend: http://localhost:8010")
    print("   Backend: http://localhost:8000")
    print("")
    print("üîß Manual commands (if scripts don't work):")
    print("   source .env")
    print("   docker compose up -d")
    print("   CORS_ORIGINS='http://localhost:3000,http://localhost:8010,http://10.96.136.74:8010' ALLOW_DEV_ORIGINS=true AUTH_ALLOW_DEV_LOGIN=true python start.py")

if __name__ == "__main__":
    main()
